Traceback (most recent call last):
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/justin_v_egmond/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pandas.plotting import parallel_coordinates

# ⬇️ Laad je dataset (pas het pad aan naar jouw bestand)
da = pd.read_csv("datasets/MentalHealthSurvey.csv")

# 🔃 Voeg handmatig kolomnamen toe als ze ontbreken of overschreven moeten worden
da.columns = [
    'gender', 'age', 'university', 'degree_level', 'degree_major', 'academic_year',
    'cgpa', 'residential_status', 'campus_discrimination', 'sports_engagement',
    'average_sleep', 'study_satisfaction', 'academic_workload', 'academic_pressure',
    'financial_concerns', 'social_relationships', 'depression', 'anxiety',
    'isolation', 'future_insecurity', 'stress_relief_activities'
]

# 🔢 CGPA converteren naar gemiddelde getal (bijv. "3.0-3.5" → 3.25)
def convert_cgpa(value):
    if isinstance(value, str) and "-" in value:
        try:
            low, high = value.split("-")
            return (float(low) + float(high)) / 2
        except:
            return None
    try:
        return float(value)
    except:
        return None

da['cgpa'] = da['cgpa'].apply(convert_cgpa)

# 💤 Slaaprange ("4-6 hrs") → gemiddeld aantal uur
def convert_sleep(value):
    if isinstance(value, str) and "-" in value:
        try:
            nums = [int(s.replace("hrs", "").strip()) for s in value.split("-")]
            return sum(nums) / len(nums)
        except:
            return None
    try:
        return float(value)
    except:
        return None

da['average_sleep'] = da['average_sleep'].apply(convert_sleep)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

# 🔢 Definieer relevante variabelen
features = [
    'academic_workload',
    'academic_pressure',
    'financial_concerns',
    'study_satisfaction',
    'social_relationships',
    'average_sleep'
]
target = 'depression'

# 🧼 Filter en converteer naar numeriek
reg_df = da[features + [target]].dropna().astype(float)

# 🧪 X en y scheiden
X = reg_df[features]
y = reg_df[target]

# 🧮 Standaardiseer features voor eerlijke coëfficiëntenvergelijking
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 🔁 Lineaire regressie
model = LinearRegression()
model.fit(X_scaled, y)

# 📊 Visualiseer coëfficiënten
coefs = pd.Series(model.coef_, index=features).sort_values()

plt.figure(figsize=(10, 6))
sns.barplot(x=coefs.values, y=coefs.index, palette="coolwarm", orient='h')
plt.axvline(0, color='black', linestyle='--')
plt.title("Effect van verklarende factoren op depressiescore")
plt.xlabel("Standaardiseerde regressiecoëfficiënt")
plt.ylabel("Factoren")
plt.tight_layout()
plt.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[3], line 51[0m
[1;32m     49[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mplt[39;00m
[1;32m     50[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mseaborn[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01msns[39;00m
[0;32m---> 51[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mlinear_model[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m LinearRegression
[1;32m     52[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpreprocessing[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m StandardScaler
[1;32m     54[0m [38;5;66;03m# 🔢 Definieer relevante variabelen[39;00m

[0;31mModuleNotFoundError[0m: No module named 'sklearn'

